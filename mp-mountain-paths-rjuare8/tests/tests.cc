// clang-format off
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
//  Written By : Student Name                    Environment : ubuntu:bionic               //
//  Date ......: 2021/02/10                      Compiler ...: clang-10                    //
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
// clang-format on
/////////////////////////////////////////////////////////////////////////////////////////////
//                             Framework Set-up //
/////////////////////////////////////////////////////////////////////////////////////////////
#include "catch.hpp"

/////////////////////////////////////////////////////////////////////////////////////////////
//                                 Includes //
/////////////////////////////////////////////////////////////////////////////////////////////
#include <stdexcept>
#include <iostream>

#include "color.hpp"
#include "elevation_dataset.hpp"
#include "grayscale_image.hpp"
#include "path.hpp"
#include "path_image.hpp"

/////////////////////////////////////////////////////////////////////////////////////////////
//                             Helpers/Constants //
/////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////
//                                Test Cases //
/////////////////////////////////////////////////////////////////////////////////////////////

TEST_CASE("Elevation_database Test", "[Elevation class}") {
  int width = 5;
  int height = 2;
  std::string test = prompt_5w_2h.dat;

  ElevationDataset Test(test, width, height);

  for (size_t i = 0; i < Test.Height(); i++) {
    for (size_t j = 0; j < Test.Width(); j++) {
      std::cout << Test.GetData().at(i).at(j) << " ";
    }
    std::cout << std::endl;
  }

  REQUIRE(Test.DatumAt(0, 0) == 10);
  REQUIRE(Test.DatumAt(1, 4) == 20);
  REQUIRE(Test.MaxEle() == 40);
  REQUIRE(Test.MinEle() == 10);
}

TEST_CASE("Grayscale_image Test", "[Grayscale class}") {
  int width = 5;
  int height = 2;
  std::string test = "10 20 30 40 35 25 20 15 18 20 ";

  ElevationDataset Test(test, width, height);

  GrayscaleImage gray_image(Test);

  for (size_t i = 0; i < gray_image.Height(); i++) {
    for (size_t j = 0; j < gray_image.Width(); j++) {
      std::cout << gray_image.ColorAt(i, j).Blue() << " ";
    }
    std::cout << std::endl;
  }

  REQUIRE(true == true);
}

/////////////////////////////////////////////////////////////////////////////////////////////